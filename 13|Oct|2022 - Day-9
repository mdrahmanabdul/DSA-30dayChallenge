13|Oct|2022
3:04pm

Today I have tried another problem where again we used Recursion along with backtracking

Question <Leetcode 39>: 
Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.
The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

Code : 
#include<bits/stdc++.h>
using namespace std;
void helper(vector<vector<int>> &result,vector<int> &temp,int index,int target,vector<int> &nums){
    //base case where we are adding a solution
    if(target==0){
        result.push_back(temp);
        return;
    }
    while(nums.size()>index && target-nums[index]>=0){
    //adding the first element
    temp.push_back(nums[index]);
    //handling the task to add the next element to recursion
    helper(result,temp,index++,target-nums[index],nums);
    //As we have to explore all the solutions we have to backtrak
    temp.pop_back();    
    }
    
}
vector<vector<int>> combinationSum(vector<int> nums,int target){
    //sort the nums
    sort(nums.begin(),nums.end());
    //eleminiate the duplicates
    nums.erase(unique(nums.begin(),nums.end()),nums.end());
    vector<vector<int>> result;
    vector<int> temp;
    int index=0;
    helper(result,temp,index,target,nums);
    return result;
}
int main(){
    int n;
    cin>>n;
    vector<int> nums;
    int temp;
    for(int i=0;i<n;i++){
        cin>>temp;
        nums.push_back(temp);
    }
    cout<<"Enter the target : "<<endl;
    int target; cin>>target;
    vector<vector<int>> result = combinationSum(nums,target);
    for(int i=0;i<result.size();i++){
        for(int j=0;j<result[i].size();j++){
            cout<<result[i][j]<<" ";
        }cout<<endl;
    }
    
}

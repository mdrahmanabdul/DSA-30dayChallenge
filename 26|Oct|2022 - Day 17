26|Oct|2022
8:08 am

Till now solved 1 problem which is two pointer based and which can be solved using sliding window algorithm. I guess all the two pointer problems can be 
solved using sliding window in O(n) time only which is a optimized code.

LeetCode : 992 : https://leetcode.com/problems/subarrays-with-k-different-integers/description/


Code : 
// 5 1 2 1 2 3 2
#include<bits/stdc++.h>
using namespace std;
int answer(vector<int> nums,int k){
    int left_End=0,right_End=0,count=0;
    unordered_map<int,int> map;
    for(right_End=0;right_End<nums.size();right_End++){
        map[nums[right_End]]++;
        while(map.size()>k){
            map[nums[left_End]]--;
            if(map[nums[left_End]]==0)
                map.erase(nums[left_End]);
                left_End++;
        }
            count+=right_End-left_End+1;
        
        
    }return count;
}
int main(){
    int n;
    cin>>n;
    vector<int> nums;
    int x;
    for(int i=0;i<n;i++){
        cin>>x;
        nums.push_back(x);
    }
    int k;
    cin>>k;
    cout<<answer(nums,k)-answer(nums,k-1);
}

9|Oct|2022
5:33 PM

So, today I came across a problem called permutations of an array in which we use recursion and backtracking to solve that problem like we did earlier to 
solve subsets of an array problem. Here we are using a simple logic.
 
Procedure : 

Suppose we took a vector of three elements namely 1,2,3
So there will be 6 possibilities. How ?
1) So, we fix the element in the first index where there are three possibilies to select the number. We can either choose 1,2 or 3.
2) For the next index there are two elements remaining. So we can that we are having only two possibilities.
3) While coming to the last element we are having single element and single index remaining with us so, we can place that in single way.
4) If we multiply all the possibilities we get the answer. 3*2*1 = 6 possibilities.

Actually I am not getting how to solve this problem so, I have copied this code from Coding Ninjas.

#include<bits/stdc++.h>
using namespace std;
void swap(int &left,int &right){
    int temp = left;
    left = right;
    right = temp;
}
void helper(vector<int> nums,vector<vector<int>> &result,int left,int right){
    if(left==right){
        result.push_back(nums);
        return;
    }
    for(int i=left;i<=right;i++){
        swap(nums[left],nums[i]);
        helper(nums,result,left+1,right);
        swap(nums[left],nums[i]);
    }
}
vector<vector<int>> permute(vector<int> v){
    vector<vector<int>> result;
    int left=0,right=v.size()-1;
    helper(v,result,left,right);
    return result;
}
int main()
{
    int n;
    cin>>n;
    vector<int> v;
    int x;
    for(int i=0;i<n;i++){
        cin>>x;
        v.push_back(x);
    }
    vector<vector<int>> result = permute(v);
    cout<<"So, there are "<<result.size()<<" possibilities : "<<endl;
    for(int i=0;i<result.size();i++){
        for(int j=0;j<result[i].size();j++){
            cout<<result[i][j]<<" ";
        }
        cout<<endl;
    }
}

Time Complexity : O(N*N!)
Space Complexity : O(N)


10:59pm
Now, I started getting clear idea about how the backtracking is working. Previously I just typed the code but now Iam understanding what is running behind
the code. 

In coding ninjas I once revisited the two famous backtracking problems they are :
1) N-Queens Problem 
2) Rat in a Maze Problem

Observations : 
1) Backtracking is not some kind of algorithm, it is an approach which is used in Recursive algorithms
2) Backtracking is used when we have to explore all the paths to find all possible ways.
3) In Backtracking we fill the first cell and we ask the approach to find all ways for us.

Question : N-Queens Problem

You are given N, and for a given N x N chessboard, find a way to place N queens such that no queen can attack any other queen on the chess board. A queen can be killed when it lies in the same row, or same column, or the same diagonal of any of the other queens. You have to print all such configurations.
Note: Don't print anything if there isn't any valid configuration.

Input Format:
The first line of input contains an integer, that denotes the value of N.     

Output Format :
In the output, you have to print every board configuration in a new line. Every configuration will have N*N board elements printed row wise and are separated by space. The cells where queens are safe and placed, are denoted by value 1 and remaining all cells are denoted by value 0. Please refer to sample test cases for more clarity.

Constraints :
1 <= N <= 10

Time Limit: 1 second

Sample Input 1:
4

Sample Output 1 :
0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 
0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 

Code : 
#include <bits/stdc++.h>

using namespace std;

int board[11][11];

bool isPossible(int n,int row,int col){

// Same Column
  for(int i=row-1;i>=0;i--){
    if(board[i][col] == 1){
      return false;
    }
  } 
//Upper Left Diagonal
  for(int i=row-1,j=col-1;i>=0 && j>=0 ; i--,j--){
    if(board[i][j] ==1){
      return false;
    }
  }

  // Upper Right Diagonal

  for(int i=row-1,j=col+1;i>=0 && j<n ; i--,j++){
    if(board[i][j] == 1){
      return false;
    }
  }

  return true;
}
void nQueenHelper(int n,int row){
  if(row==n){
    // We have reached some solution.
    // Print the board matrix
    // return

    for(int i=0;i<n;i++){
      for(int j=0;j<n;j++){
        cout << board[i][j] << " ";
      }
    }
    cout<<endl;
    return;

  }

  // Place at all possible positions and move to smaller problem
  for(int j=0;j<n;j++){

    if(isPossible(n,row,j)){
      board[row][j] = 1;
      nQueenHelper(n,row+1);
      board[row][j] = 0;
    }
  }
  return;

}
void placeNQueens(int n){

  memset(board,0,11*11*sizeof(int));

  nQueenHelper(n,0);

}
int main(){
  int n;
    cin >> n;
  placeNQueens(n);
  return 0;
}

Problem 2 : Rat in a maze

You are given an integer N and a binary 2D array of size N*N. The given binary matrix represents a maze and a rat starts from the top left cell and has to reach to the bottom right cell of the maze. The rat can move in all the four directions: up, down, left and right.
In the given binary matrix, 0 signifies the cell is a dead end and 1 signifies the cell can be used to move from source to destination cell.
You have to print all the paths, following which rat can move from the top left cell to the bottom right cell of the given binary matrix.

Input Format
The first line of input contains an integer, that denotes the value of N.
Each of the following N lines denote rows of the binary matrix and contains either 0 or 1. Each row of the binary matrix contains N elements. 

Output Format :
Every possible solution has to be printed on a separate line. Each of the possible solution will have N*N elements, printed row wise and separated by space. The cells that are part of the path should be 1 and remaining all cells should be 0. Please refer to sample test cases for more clarity.   

Constraints
1 <= N <= 18
0 <= Number of cells with value 1 <= 15

Time Limit: 1 second

Sample Input 1 :
3
1 0 1
1 0 1
1 1 1

Sample Output 1 :
1 0 0 1 0 0 1 1 1 

Explanation :
Only 1 path is possible. The path is shown in the image below.
Alt Text

Sample Input 2 :
3
1 0 1
1 1 1
1 1 1

Sample Output 2 :
1 0 0 1 1 1 1 1 1 
1 0 0 1 0 0 1 1 1 
1 0 0 1 1 0 0 1 1 
1 0 0 1 1 1 0 0 1 

Code :
#include<bits/stdc++.h>
using namespace std;
int maze[20][20];
int maze_path[20][20];
void solve(int n,int row,int col){
    if(row==n-1 && col==n-1){
        maze_path[row][col]=1;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                cout<<maze_path[i][j]<<" ";
            }
            cout<<endl;
        }
        cout<<endl<<endl;
        return;
    }
    if(row>=n || col>=n || row<0 || col<0 || maze_path[row][col]==1 || maze[row][col]==0){
        return;
    }
    maze_path[row][col]=1;
    solve(n,row+1,col);
    solve(n,row-1,col);
    solve(n,row,col+1);
    solve(n,row,col-1);
    maze_path[row][col]=0;
}
int main(){
    int n;
    cin>>n;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cin>>maze[i][j];
        }
    }
    cout<<endl;
    solve(n,0,0);
}

Explanation : Here we are giving the first cell input and we are specifying all the direction in which a rat can travel then we backtrack if a possible 
path is not found. Like this we explore all the paths.

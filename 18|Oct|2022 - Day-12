18|Oct|2022
4:23pm

Today I have solved another problem which is based on backtracking only. Slowing I am coming to know about various techniques to solve problems. I tried to 
solve this problem but I was not able to solve this problem by myself. But unlike last time I was not mind blocked, I went to some extent but I was not 
clear what number I have to choose to solve this problem. Somehow I solved this important question.

LeetCode 698 : https://leetcode.com/problems/partition-to-k-equal-sum-subsets/description/

Code : 
#include<bits/stdc++.h>
using namespace std;
bool visited[17];
bool helper(int index,int sum,int currentSum,int k,vector<int> &nums,int targetSum){
    if(k==1){
        return true;
    }
    if(currentSum>targetSum){
        return false;
    }
    if(currentSum==targetSum){
        helper(0,sum,0,k-1,nums,targetSum);
    }
    for(int i=index;i<nums.size();i++){
        if(!visited[i-1] && nums[i]==nums[i-1]){
            continue;
        }
        if(!visited[i] && currentSum+nums[i]<targetSum){
            visited[i]=true;
            if(index+1,sum,currentSum+nums[i],k,nums,targetSum){
                return true;
            }
            visited[i]=false;
        }
    }
    return false;
}
bool canPossible(vector<int> nums,int k){
    int totalSum = accumulate(nums.begin(),nums.end(),0);
    if(k==0 || totalSum%k!=0){
        return false;
    }
    int index=0,currentSum=0;
    memset(visited,false,sizeof(visited));
    int targetSum=totalSum/k;
    return helper(index,totalSum,currentSum,k,nums,targetSum);
}
int main(){
    int n;
    cin>>n;
    vector<int> nums;
    int x;
    for(int i=0;i<n;i++){
        cin>>x;
        nums.push_back(x);
    }
    cout<<"Enter k : "<<endl;
    int k;cin>>k;
    if(canPossible(nums,k)){
        cout<<"true";
    }else{
        cout<<"false";
    }
}

Explanation : 

So, here we are not allowed the same number again and we are asked to find if we can divide the array into k parts such that they can be divided into 
k equal parts or not. So, this is how I solved this problem. 
I will read System Design in the evening and solve another problem after reading System Design.





28|Oct|2022
10:14 am

As today is the last day of stacks I am practicing some standard stack problems which are not present in the list.

1) Queue using two Stacks

Code : 
#include<bits/stdc++.h>
using namespace std;
struct Queue{
    stack<int> s1,s2;
    void enQueue(int data){
        while(!s1.empty()){
            s2.push(s1.top());
            s1.pop();
        }
        s1.push(data);
        while(!s2.empty()){
            s1.push(s2.top());
            s2.pop();
        }
    }
    
    int deQueue(){
        if(s1.empty()){
           cout<<"queue is empty"<<endl;
           exit(0);
        } 
        int x = s1.top();
        s1.pop();
        return x;
    }
    
    int Front(){
        if(s1.empty()){
            cout<<"Empty Queue"<<endl;
            exit(0);
        }
        return s1.top();
    }
};
int main(){
    Queue q;
    q.enQueue(1);
    q.enQueue(2);
    q.enQueue(3);
    q.enQueue(4);
    q.enQueue(5);
    q.enQueue(6);
    cout<<q.deQueue()<<endl;
    cout<<q.deQueue()<<endl;
    cout<<"front "<<q.Front();
}

11:01 am

Code : Stack usign two Queues

#include<iostream>
#include<queue>
using namespace std;
class Stack{
    queue<int> q1,q2;
    public :
    void push(int data){
        q2.push(data);
        while(!q1.empty()){
            q2.push(q1.front());
            q1.pop();
        }
        queue<int> q=q1;
        q1=q2;
        q2=q;
    }
    
    void pop(){
        if(!q1.empty()){
            q1.pop();
        }else{
            exit(0);
        }
    }
    void front(){
        if(!q1.empty()){
           cout<<q1.front(); 
        }else{
            exit(0);
        }
    }
    void size(){
        if(!q1.empty()){
            cout<<q1.size();
        }else{
            cout<<"empty "<<endl;
        }
    }
};
int main(){
    Stack st;
    st.push(1);
    st.push(2);
    st.push(3);
    cout<<"size : ";
    st.size();
    cout<<endl;
    st.pop();
    cout<<"front : ";
    st.front();
    st.push(100);
    cout<<endl;
    cout<<"front : ";
    st.front();
}


9:11 pm

Learnt Javascript let and const keywords.
Learnt about classes, properties and methods.

class Human{
  constructor(){
    this.hands=2;
    this.legs=2;
  }
}
class Person extends Human{
  constructor(){
    super();
    this.age=21;
    this.name='Rahman';
    this.legs=4;
  }
  printLegs(){
    console.log(this.legs)
  }
}

const p=new Person();
p.printLegs();




